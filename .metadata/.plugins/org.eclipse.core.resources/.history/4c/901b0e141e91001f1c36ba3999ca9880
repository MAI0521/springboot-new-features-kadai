package com.example.nagoyameshi.service;
 
 import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.UUID;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.form.RestaurantEditForm;
import com.example.nagoyameshi.form.RestaurantRegisterForm;
import com.example.nagoyameshi.repository.CategoryRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
 
 @Service
 public class CategoryService {
     private final CategoryRepository categoryRepository;    
     
     public RestaurantService(CategoryRepository categoryRepository) {
         this.categoryRepository = categoryRepository;        
     }    
     
     @Transactional
     public void create(CategoryRegisterForm categoryRegisterForm) {
    	 Category category = new Category();        
         MultipartFile imageFile = restaurantRegisterForm.getImageFile();
         
         if (!imageFile.isEmpty()) {
             String imageName = imageFile.getOriginalFilename(); 
             String hashedImageName = generateNewFileName(imageName);
             Path filePath = Paths.get("src/main/resources/static/storage/" + hashedImageName);
             copyImageFile(imageFile, filePath);
             restaurant.setImageName(hashedImageName);
         }
         
         restaurant.setVenueName(restaurantRegisterForm.getVenueName()); 
         restaurant.setCategory(restaurantRegisterForm.getCategory());
         restaurant.setDescription(restaurantRegisterForm.getDescription());
         restaurant.setPostalCode(restaurantRegisterForm.getPostalCode());
         restaurant.setAddress(restaurantRegisterForm.getAddress());
         restaurant.setOpeningHour(restaurantRegisterForm.getOpeningHour());
         restaurant.setClosingHour(restaurantRegisterForm.getClosingHour());
         restaurant.setReservationCapacity(restaurantRegisterForm.getReservationCapacity());
         restaurant.setBudgetRange(restaurantRegisterForm.getBudgetRange());
                     
         restaurantRepository.save(restaurant);
     }  
     
     @Transactional
     public void update(RestaurantEditForm restaurantEditForm) {
    	 Restaurant restaurant = restaurantRepository.getReferenceById(restaurantEditForm.getId());
         MultipartFile imageFile = restaurantEditForm.getImageFile();
         
         if (!imageFile.isEmpty()) {
             String imageName = imageFile.getOriginalFilename(); 
             String hashedImageName = generateNewFileName(imageName);
             Path filePath = Paths.get("src/main/resources/static/storage/" + hashedImageName);
             copyImageFile(imageFile, filePath);
             restaurant.setImageName(hashedImageName);
         }
         
         restaurant.setVenueName(restaurantEditForm.getVenueName()); 
         restaurant.setCategory(restaurantEditForm.getCategory());
         restaurant.setDescription(restaurantEditForm.getDescription());
         restaurant.setPostalCode(restaurantEditForm.getPostalCode());
         restaurant.setAddress(restaurantEditForm.getAddress());
         restaurant.setOpeningHour(restaurantEditForm.getOpeningHour());
         restaurant.setClosingHour(restaurantEditForm.getClosingHour());
         restaurant.setReservationCapacity(restaurantEditForm.getReservationCapacity());
         restaurant.setBudgetRange(restaurantEditForm.getBudgetRange());
                     
         restaurantRepository.save(restaurant);
     }   