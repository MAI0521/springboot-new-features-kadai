package com.example.samuraitravel.service;

 import java.awt.print.Pageable;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Map;

import org.springframework.data.domain.ScrollPosition.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.multipart.MultipartFile;

import com.example.samuraitravel.entity.House;
import com.example.samuraitravel.entity.Reservation;
import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.form.HouseRegisterForm;
import com.example.samuraitravel.form.ReviewForm;
import com.example.samuraitravel.entity.Review;
import com.example.samuraitravel.repository.HouseRepository;
import com.example.samuraitravel.repository.ReservationRepository;
import com.example.samuraitravel.repository.UserRepository;

import ch.qos.logback.core.model.Model;

import com.example.samuraitravel.repository.ReviewRepository;
 
 @Service
public class ReviewService {
	private final ReviewRepository reviewRepository;  
	private final HouseRepository houseRepository;  
	private final UserRepository userRepository;  

	public ReviewService(ReviewRepository reviewRepository, HouseRepository houseRepository, UserRepository userRepository) {
	    this.reviewRepository = reviewRepository;  
	    this.houseRepository = houseRepository;  
	    this.userRepository = userRepository;  
	}
	
	@Transactional
	public void create(ReviewForm reviewForm) {
	    Review review = new Review();
	    
	    Integer houseId = Integer.valueOf(reviewForm.getHouseId);
	    Integer userId = Integer.valueOf(reviewForm.getUserId);
	    
	    review.setHouseId(houseId);
	    review.setUserId(userId);
	    review.setRating(Integer.valueOf(reviewForm.get("rating")));
	    review.setComment(reviewForm.get("comment"));
	    
	    // Assuming you have a ReviewRepository to save the review
	    reviewRepository.save(review);
	}
    
 }
