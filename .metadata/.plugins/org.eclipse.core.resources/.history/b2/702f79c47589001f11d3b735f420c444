package com.example.nagoyameshi.controller;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.User;
import com.example.nagoyameshi.form.UserEditForm;
import com.example.nagoyameshi.repository.UserRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.StripeService;
import com.example.nagoyameshi.service.UserNotFoundException;
import com.example.nagoyameshi.service.UserService;

import jakarta.servlet.http.HttpServletRequest;

@Controller
@RequestMapping("/user")
public class UserController {
    private final UserRepository userRepository; 
    private final UserService userService;
    private final StripeService stripeService;
    
    public UserController(UserRepository userRepository, UserService userService, StripeService stripeService) {
        this.userRepository = userRepository;
        this.userService = userService; 
        this.stripeService = stripeService;
    }    
    
    @GetMapping
    public String index(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {         
        User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());  
        
        model.addAttribute("user", user);
        
        return "user/index";
    }
    
    @GetMapping("/edit")
    public String edit(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {        
        User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());  
        UserEditForm userEditForm = new UserEditForm(user.getId(), 
        		user.getFullName(), 
        		user.getKana(), 
        		user.getEmail());
        
        model.addAttribute("userEditForm", userEditForm);
        
        return "user/edit";
    }
    
    @PostMapping("/update")
    public String update(@ModelAttribute @Validated UserEditForm userEditForm, BindingResult bindingResult, RedirectAttributes redirectAttributes) {
        // メールアドレスが変更されており、かつ登録済みであれば、BindingResultオブジェクトにエラー内容を追加する
        if (userService.isEmailChanged(userEditForm) && userService.isEmailRegistered(userEditForm.getEmail())) {
            FieldError fieldError = new FieldError(bindingResult.getObjectName(), "email", "すでに登録済みのメールアドレスです。");
            bindingResult.addError(fieldError);                       
        }
        
        if (bindingResult.hasErrors()) {
            return "user/edit";
        }
        
        userService.update(userEditForm);
        redirectAttributes.addFlashAttribute("successMessage", "会員情報を編集しました。");
        
        return "redirect:/user";
    } 
    
//    @GetMapping("/create-checkout-session")
//    public String createCheckoutSession(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, 
//    		 HttpServletRequest httpServletRequest,
//    		 Model model) {        
//        User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
//        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        
//        String sessionId = stripeService.createStripeSession(authentication.getName(), httpServletRequest);
//        if (sessionId.isEmpty()) {
//            model.addAttribute("error", "Failed to create a payment session.");
//            return "redirect:/user";  // Stay on the same page or show an error message
//        }
        
        // Redirect to Stripe's checkout page
//        return "redirect:https://checkout.stripe.com/pay/" + sessionId;
//    } 
    
    public ResponseEntity<Map<String, String>> createCheckoutSession(
            @AuthenticationPrincipal UserDetailsImpl userDetailsImpl, 
            HttpServletRequest httpServletRequest) {
        
        System.out.println("Creating checkout session for user: " + userDetailsImpl.getUser().getEmail());

        // Prepare the payment intent object
        Map<String, String> paymentIntentObject = new HashMap<>();
        paymentIntentObject.put("userName", userDetailsImpl.getUser().getEmail());
        paymentIntentObject.put("signupDate", LocalDate.now().toString()); // Example for signupDate, change as necessary

        User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String sessionId;
        try {
            // Create the Stripe session
            sessionId = stripeService.createStripeSession(authentication.getName(), httpServletRequest);
            
            // Update the user's membership status
            User updatedUser = userService.createCheckoutSession(paymentIntentObject);
            System.out.println("Successfully created sessionId: " + sessionId);
        } catch (UserNotFoundException e) {
            System.err.println("User not found: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(Map.of("error", "User not found"));
        } catch (IllegalArgumentException e) {
            System.err.println("Invalid payment intent data: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of("error", "Invalid payment intent data"));
        } catch (Exception e) {
            System.err.println("Error creating Stripe session: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of("error", "Failed to create checkout session"));
        }

        // Prepare the response with the session ID
        Map<String, String> response = new HashMap<>();
        response.put("sessionId", sessionId);
        
        // Return the session ID in the response
        return ResponseEntity.ok(response);
    }
}
