package com.example.nagoyameshi.service;

import java.util.NoSuchElementException;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.nagoyameshi.entity.Favorite;
import com.example.nagoyameshi.entity.Reservation;
import com.example.nagoyameshi.entity.Restaurant;
import com.example.nagoyameshi.form.ReservationRegisterForm;
import com.example.nagoyameshi.repository.ReservationRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.repository.UserRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;

@Service
public class ReservationService {
	private final ReservationRepository reservationRepository;  
    private final RestaurantRepository restaurantRepository;  
    private final UserRepository userRepository;  
    
    public ReservationService(ReservationRepository reservationRepository, RestaurantRepository restaurantRepository, UserRepository userRepository) {
        this.reservationRepository = reservationRepository;  
        this.restaurantRepository = restaurantRepository;  
        this.userRepository = userRepository;  
    }    

    
    // 人数が定員以下かどうかをチェックする
    public boolean isWithinCapacity(Integer reservationCount, Integer reservationCapacity) {
        return reservationCount <= reservationCapacity;
    }
    
@Transactional
public void create(UserDetailsImpl userDetailsImpl, ReservationRegisterForm reservationRegisterForm) {
	Reservation reservation = new Reservation();
	Restaurant restaurant = restaurantRepository.getReferenceById(reservationRegisterForm.getRestaurantId());
	Integer user = userDetailsImpl.getUser().getId();
	
	reservation.setRestaurant(restaurant);
    reservation.setUser(user);
    reservation.setReservationDateTime(reservationRegisterForm.getReservationDateTime());
    reservation.setReservationCount(reservationRegisterForm.getReservationCount());
    
    // Save the reservation to the database
    reservationRepository.save(reservation);
    }

@Transactional
public static void cancelReservationById(Integer id) {
    Optional<Reservation> optionalReservation = reservationRepository.findById(id);
	for (Reservation reservation : reservations) {
        reservationRepository.delete(reservation);
	}
        
}