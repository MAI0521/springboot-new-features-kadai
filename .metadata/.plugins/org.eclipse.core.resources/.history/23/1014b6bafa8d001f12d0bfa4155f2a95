package com.example.nagoyameshi.service;

import java.time.LocalDate;
import java.util.Map;
import java.util.Optional;

import org.hibernate.boot.jaxb.JaxbLogger_.logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.stripe.Stripe;
import com.stripe.exception.ApiConnectionException;
import com.stripe.exception.ApiException;
import com.stripe.exception.AuthenticationException;
import com.stripe.exception.InvalidRequestException;
import com.stripe.exception.PermissionException;
import com.stripe.exception.RateLimitException;
import com.stripe.exception.StripeException;
import com.stripe.model.Event;
import com.stripe.model.StripeObject;
import com.stripe.model.checkout.Session;
import com.stripe.param.checkout.SessionCreateParams;
import com.stripe.param.checkout.SessionRetrieveParams;

import jakarta.annotation.PostConstruct;
import jakarta.servlet.http.HttpServletRequest;

@Service
public class StripeService {
	// セッションを作成し、Stripeに必要な情報を返す
	
	@Value("${stripe.api-key}")
    private String stripeApiKey;
	
	 @PostConstruct
     private void init() {
         // Stripeのシークレットキーを設定する
         Stripe.apiKey = stripeApiKey;
     }
	
	private final UserService userService;
    
    public StripeService(UserService userService) {
        this.userService = userService;
    }    
	
    public String createStripeSession(String username, HttpServletRequest httpServletRequest) {
    	Stripe.apiKey = stripeApiKey;
    	String requestUrl = httpServletRequest.getRequestURL().toString();
        String priceId = "price_1Q9M3bG1Q8EB8XUacUbkFtmb"; 
        
        SessionCreateParams sessionCreateParams = new SessionCreateParams.Builder()
        		  .setSuccessUrl(requestUrl.replace("/create-checkout-session", "") + "/success?session_id={CHECKOUT_SESSION_ID}")
        		  .setCancelUrl(requestUrl.replace("/create-checkout-session", "") + "/cancel")
        		  .setMode(SessionCreateParams.Mode.SUBSCRIPTION)
        		  .addLineItem(new SessionCreateParams.LineItem.Builder()
        		    // For metered billing, do not pass quantity
        		    .setQuantity(1L)
        		    .setPrice(priceId)
        		    .build()
        		  )
        		  .setCustomerEmail(getCurrentUserName()) 
//        		  .setPaymentIntentData(
//	                  SessionCreateParams.PaymentIntentData.builder()
//	                  	  .putMetadata("userName", getCurrentUserName())
//	                      .putMetadata("signupDate", LocalDate.now().toString())
//	                      .build())
        		  .setPaymentIntentData(
        				    SessionCreateParams.PaymentIntentData.builder()
        				        .putMetadata("userName", getCurrentUserName())
        				        .putMetadata("signupDate", LocalDate.now().toString())
        				        .build()
        				)
        		  .build();
        
        try {
            Session session = Session.create(sessionCreateParams);
            System.out.println("Stripe session created with ID: " + session.getId());
            return session.getUrl();  // Return the session ID
        } catch (StripeException e) {
            e.printStackTrace();
            // You can throw a custom exception or handle it as needed
            throw new RuntimeException("Failed to create Stripe session: " + e.getMessage());
        }
       
    }

    private String getCurrentUserName() {
    	Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return (authentication != null) ? authentication.getName() : "Anonymous";
    }
    
    public void processSessionCompleted(Event event) {
    	 Optional<StripeObject> optionalStripeObject = event.getDataObjectDeserializer().getObject();
    	 
         optionalStripeObject.ifPresentOrElse(stripeObject -> {
             // StripeObjectオブジェクトをSessionオブジェクトに型変換する
             Session session = (Session)stripeObject;
             
             // "payment_intent"情報を展開する（詳細情報を含める）ように指定したSessionRetrieveParamsオブジェクトを生成する
             SessionRetrieveParams sessionRetrieveParams = SessionRetrieveParams.builder()
            		    .addExpand("payment_intent")
            		    .build();

            		try {
            		    Session retrievedSession = Session.retrieve(session.getId(), sessionRetrieveParams, null);
            		    Map<String, String> metadata = retrievedSession.getPaymentIntentObject().getMetadata();
            		    userService.createCheckoutSession(metadata);
            		    System.out.println("予約情報の登録処理が成功しました");
            		} catch (StripeException e) {
            			System.out.println();
            		    throw new RuntimeException("予約情報の登録処理が失敗しました", e);  // Optionally re-throw
            		})
        }

        // StripeのAPIとstripe-javaライブラリのバージョンをコンソールに出力する
        System.out.println("Stripe API Version: " + event.getApiVersion());
        System.out.println("stripe-java Version: " + Stripe.VERSION + ", stripe-java API Version: " + Stripe.API_VERSION);
    }
}